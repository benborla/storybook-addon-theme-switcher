{"version":3,"sources":["../src/manager.tsx","../src/constants.ts","../src/components/ThemeSelector.tsx","../src/components/Indicators.tsx","../src/helpers/index.ts"],"names":["React","Fragment"],"mappings":"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","sourcesContent":["import React, { Fragment } from 'react';\nimport { addons, types } from '@storybook/manager-api';\n\nimport { ADDON_ID } from './constants';\nimport { ThemeSelector } from './components/ThemeSelector';\n\naddons.register(ADDON_ID, () => {\n  addons.add(ADDON_ID, {\n    title: 'Theme Switcher',\n    type: types.TOOL,\n    match: ({ viewMode }) => !!(viewMode && viewMode.match(/^(story|docs)$/)),\n    render: () => (\n      <Fragment>\n        <ThemeSelector />\n      </Fragment>\n    ),\n  });\n});\n","export const ADDON_ID = 'storybook/theme-switcher';\nexport const PARAM_KEY = 'themes';\n\nexport const EVENTS = {\n  UPDATE: `${ADDON_ID}/update`,\n};\n","import React, {\n  useState,\n  Fragment,\n  useCallback,\n  useMemo,\n  memo,\n  type FC\n} from 'react';\nimport memoize from 'memoizerific';\n\nimport { useParameter, useGlobals } from '@storybook/manager-api';\nimport { IconButton, WithTooltip, TooltipLinkList } from '@storybook/components';\n\nimport { PARAM_KEY as THEMES_PARAM_KEY } from '../constants';\nimport { Icon } from './Indicators';\nimport type {\n  BrandSelectorItem,\n  Brand,\n  BrandsParameter,\n  GlobalState,\n} from '../types';\nimport { getBrandByName, getBrand } from '../helpers';\n\nconst createBrandSelectorItem = memoize(1000)(\n  (\n    id: string,\n    name: string,\n    label: string,\n    css: string,\n    indicator: string | 'black',\n    change: (arg: { selected: string; name: string }) => void,\n    active: boolean,\n    useIconOnIndicator\n  ): BrandSelectorItem => ({\n    id: id || name,\n    //@INFO: set item to uppercase\n    title: label,\n    onClick: () => {\n      change({ selected: name, name });\n    },\n    css,\n    right: <Icon indicator={indicator} useIcon={useIconOnIndicator} />,\n    active,\n  })\n);\n\nconst getDisplayedItems = memoize(10)(\n  (\n    brands: Brand[],\n    selectedBrand: Brand,\n    change: (arg: { selected: string; name: string }) => void\n  ) => brands.map(({ name, label, css, indicator, useIconOnIndicator }) =>\n    createBrandSelectorItem(\n      `id-${name}`,\n      name,\n      label,\n      css,\n      indicator,\n      change,\n      name === selectedBrand?.name,\n      useIconOnIndicator\n    )\n  )\n);\n\nconst DEFAULT_BRAND_CONFIG: BrandsParameter = {\n  default: null,\n  disable: true,\n  brands: [],\n};\n\nexport const ThemeSelector: FC = memo(function BackgroundSelector() {\n  const brandsConfig = useParameter<BrandsParameter>(\n    THEMES_PARAM_KEY,\n    DEFAULT_BRAND_CONFIG\n  );\n\n  const [isTooltipVisible, setIsTooltipVisible] = useState<boolean>(false);\n  const [globals, updateGlobals] = useGlobals();\n\n  const globalsTheme = globals[THEMES_PARAM_KEY]?.brand;\n  const defaultBrand = getBrand(brandsConfig.brands, brandsConfig.default)\n\n  const selectedBrand = useMemo<Brand>(() => {\n    return getBrandByName(\n      globalsTheme,\n      brandsConfig.brands,\n      brandsConfig.default\n    );\n  }, [brandsConfig, globalsTheme]);\n\n  const themeLabel = selectedBrand?.label || defaultBrand?.label\n\n  const onBrandChange = useCallback(\n    (brand: string) => {\n      // INFO: Update Storybook URL global value\n      updateGlobals({ [THEMES_PARAM_KEY]: { brand } });\n    },\n    [brandsConfig, globals, updateGlobals]\n  );\n\n  if (brandsConfig.disable) {\n    return null;\n  }\n\n  return (\n    <Fragment>\n      <WithTooltip\n        placement=\"top\"\n        closeOnOutsideClick\n        tooltip={({ onHide }) => {\n          return (\n            <TooltipLinkList\n              links={getDisplayedItems(\n                brandsConfig.brands,\n                selectedBrand,\n                ({ selected }: GlobalState) => {\n                  if (selectedBrand?.name !== selected) {\n                    onBrandChange(selected);\n                  }\n                  onHide();\n                }\n              )}\n            />\n          );\n        }}\n        onVisibleChange={setIsTooltipVisible}\n      >\n        <IconButton\n          key=\"theme\"\n          title=\"Change the theme of the preview\"\n          active={selectedBrand?.name !== '' || isTooltipVisible}\n        >\n          {`Theme: ${themeLabel}`}\n        </IconButton>\n      </WithTooltip>\n    </Fragment>\n  );\n});\n","import { styled } from '@storybook/theming';\n\nexport const Icon = styled.span(\n  ({ indicator, useIcon }: { indicator: string, useIcon: boolean }) => ({\n    borderRadius: '100%',\n    display: 'block',\n    height: '36px',\n    width: '36px',\n    background:  useIcon ? 'none' : indicator,\n    backgroundImage: useIcon ? `url(${indicator})` : 'none',\n    backgroundSize: '100%'\n  }),\n);\n","import { global } from '@storybook/global';\nimport type { Brand } from '../types';\n\nconst { document } = global;\n\nexport const getBrandByName = (\n  currentSelectedValue: string,\n  brands: Brand[] = [],\n  defaultName?: string\n): Brand | null => {\n  return getBrand(brands, (currentSelectedValue ?? defaultName)) || null;\n};\n\nexport const getBrand = (brands: Brand[], key: string): Brand | null => (\n  brands.find((brand: Brand) => brand.name === key)\n)\n\nexport const attachThemeStyle = (selector: string, css: string, storyId: string) => {\n  const styling = document.getElementById(selector) as HTMLStyleElement;\n\n  if (styling) {\n    // @INFO: this makes the switching of theme reactive\n    styling.parentNode.removeChild(styling);\n  }\n\n  // @INFO: re-attach the <style> element\n  const style = document.createElement('style') as HTMLStyleElement;\n  style.setAttribute('id', selector);\n  style.setAttribute('data-addon', 'theme-switcher');\n  style.setAttribute('data-author', 'spark');\n  style.setAttribute('data-storyId', storyId);\n  style.innerHTML = css;\n\n  document.head.appendChild(style);\n};\n"]}