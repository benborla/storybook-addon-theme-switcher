{"version":3,"sources":["../src/decorators/withBrandThemesSwitcher.ts","../src/constants.ts","../src/helpers/index.ts","../src/preview.tsx"],"names":[],"mappings":";AAAA,SAAS,SAAS,iBAAiB;;;ACA5B,IAAM,WAAW;AACjB,IAAM,YAAY;AAElB,IAAM,SAAS;AAAA,EACpB,QAAQ,GAAG;AACb;;;ACLA,SAAS,cAAc;AAGvB,IAAM,EAAE,SAAS,IAAI;AAEd,IAAM,iBAAiB,CAC5B,sBACA,SAAkB,CAAC,GACnB,gBACiB;AACjB,SAAO,SAAS,QAAS,wBAAwB,WAAY,KAAK;AACpE;AAEO,IAAM,WAAW,CAAC,QAAiB,QACxC,OAAO,KAAK,CAAC,UAAiB,MAAM,SAAS,GAAG;AAG3C,IAAM,mBAAmB,CAAC,UAAkB,KAAa,YAAoB;AAClF,QAAM,UAAU,SAAS,eAAe,QAAQ;AAEhD,MAAI,SAAS;AAEX,YAAQ,WAAW,YAAY,OAAO;AAAA,EACxC;AAGA,QAAM,QAAQ,SAAS,cAAc,OAAO;AAC5C,QAAM,aAAa,MAAM,QAAQ;AACjC,QAAM,aAAa,cAAc,gBAAgB;AACjD,QAAM,aAAa,eAAe,OAAO;AACzC,QAAM,aAAa,gBAAgB,OAAO;AAC1C,QAAM,YAAY;AAElB,WAAS,KAAK,YAAY,KAAK;AACjC;;;AFxBA,IAAM,iBAAiB,CAAC,OAAe,WAAqB;AAAA;AAAA,mDAET;AAAA;AAAA,UAEzC,OAAO,IAAI,CAAC,UAAiB,OAAO,OAAO,WAAW,EAAE,KAAK,EAAE;AAAA;AAAA;AAAA;AAKlE,IAAM,0BAA0B,CACrC,SACA,YACG;AACH,QAAM,EAAE,SAAS,WAAW,IAAI;AAEhC,QAAM,eAAe,WAAW,SAAgB;AAChD,QAAM,4BAA4B,QAAQ,SAAgB,GAAG,SAAS,cAAc;AACpF,QAAM,cAAc,SAAS,aAAa,QAAQ,yBAAyB;AAE3E,MAAI,OAAO,gBAAgB,aAAa;AACtC,WAAO,eAAe,2BAA2B,aAAa,MAAM;AAAA,EACtE;AAEA,QAAM,qBAAqB,QAAe,MACxC;AAAA,IACE;AAAA,IACA,aAAa;AAAA,IACb,aAAa;AAAA,EACf,GACC,CAAC,cAAc,yBAAyB,CAAC;AAE5C,QAAM,WAAW;AAAA,IACf,MAAM,mBAAmB,QAAS,OAAO,mBAAmB,SAAS;AAAA,IACrE,CAAC,kBAAkB;AAAA,EACrB;AAEA,QAAM,WACJ,QAAQ,aAAa,SAAS,YAAY,QAAQ,mBAAmB;AAEvE,QAAM,kBAAkB,QAAgB,MAAM;AAE5C,UAAM,gBAAgB,oBAAoB;AAE1C,WAAO;AAAA;AAAA,qBAEU;AAAA;AAAA,EAEnB,GAAG,CAAC,oBAAoB,QAAQ,CAAC;AAEjC,YAAU,MAAM;AACd,UAAM,aACJ,QAAQ,aAAa,SACjB,6BAA6B,QAAQ,OACrC;AAEN;AAAA,MACE;AAAA,MACA;AAAA,MACA,QAAQ,aAAa,SAAS,QAAQ,KAAK;AAAA,IAC7C;AAAA,EACF,GAAG,CAAC,UAAU,iBAAiB,OAAO,CAAC;AAEvC,SAAO,QAAQ;AACjB;;;AGpEA,IAAM,UAAwC;AAAA,EAC5C,YAAY,CAAC,uBAAuB;AAAA,EACpC,YAAY;AAAA,IACV,CAAC,SAAS,GAAG;AAAA,MACX,QAAQ;AAAA,QACN;AAAA,UACE,MAAM;AAAA,UACN,KAAK;AAAA,UACL,WAAW;AAAA,UACX,oBAAoB;AAAA,UACpB,OAAO;AAAA,QACT;AAAA,QACA;AAAA,UACE,MAAM;AAAA,UACN,KAAK;AAAA,UACL,WAAW;AAAA,UACX,oBAAoB;AAAA,UACpB,OAAO;AAAA,QACT;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EACA,SAAS;AAAA,IACP,CAAC,SAAS,GAAG;AAAA,EACf;AACF;AAEA,IAAO,kBAAQ","sourcesContent":["import { useMemo, useEffect } from '@storybook/preview-api';\nimport type { Renderer, PartialStoryFn as StoryFunction, StoryContext } from '@storybook/types';\nimport { PARAM_KEY as THEMES_PARAM_KEY } from '../constants';\nimport {\n  attachThemeStyle,\n  getBrandByName,\n  getBrand,\n} from '../helpers';\nimport type { Brand } from '../types';\n\nconst renderErrorDoc = (theme: string, brands: Brand[]) => (`\n  <div>\n    <h1 style='color: red'>Could not find theme: ${theme}</h1>\n    <p>Available brands in configuration:</p>\n    <ul>${brands.map((brand: Brand) => `<li>${brand?.name}</li>`).join('')}\n    </ul>\n  </div>\n`);\n\nexport const withBrandThemesSwitcher = (\n  StoryFn: StoryFunction<Renderer>,\n  context: StoryContext<Renderer>\n) => {\n  const { globals, parameters } = context;\n  // @INFO: capture global theme.brand value\n  const brandsConfig = parameters[THEMES_PARAM_KEY];\n  const globalsThemeSelectedBrand = globals[THEMES_PARAM_KEY]?.brand || brandsConfig?.default;\n  const brandExists = getBrand(brandsConfig.brands, globalsThemeSelectedBrand);\n\n  if (typeof brandExists === 'undefined') {\n    return renderErrorDoc(globalsThemeSelectedBrand, brandsConfig.brands);\n  }\n\n  const selectedBrandTheme = useMemo<Brand>(() => (\n    getBrandByName(\n      globalsThemeSelectedBrand,\n      brandsConfig.brands,\n      brandsConfig.default\n    )\n  ), [brandsConfig, globalsThemeSelectedBrand]);\n\n  const isActive = useMemo<boolean>(\n    () => selectedBrandTheme.name && (typeof selectedBrandTheme.name !== 'undefined'),\n    [selectedBrandTheme]\n  );\n\n  const selector =\n    context.viewMode === 'docs' ? `#anchor--${context.id} .docs-story` : '.sb-show-main';\n\n  const brandThemeStyle = useMemo<string>(() => {\n    // INFO: apply css file as style \n    const brandCssValue = selectedBrandTheme?.css\n\n    return `\n      /** Spark Tokens **/\n      @import url(\"${brandCssValue}\");\n    `;\n  }, [selectedBrandTheme, selector]);\n\n  useEffect(() => {\n    const selectorId =\n      context.viewMode === 'docs'\n        ? `addon-theme-switcher-docs-${context.id}`\n        : `addon-theme-switcher-color`;\n\n    attachThemeStyle(\n      selectorId,\n      brandThemeStyle,\n      context.viewMode === 'docs' ? context.id : null\n    );\n  }, [isActive, brandThemeStyle, context]);\n\n  return StoryFn();\n};\n","export const ADDON_ID = 'storybook/theme-switcher';\nexport const PARAM_KEY = 'themes';\n\nexport const EVENTS = {\n  UPDATE: `${ADDON_ID}/update`,\n};\n","import { global } from '@storybook/global';\nimport type { Brand } from '../types';\n\nconst { document } = global;\n\nexport const getBrandByName = (\n  currentSelectedValue: string,\n  brands: Brand[] = [],\n  defaultName?: string\n): Brand | null => {\n  return getBrand(brands, (currentSelectedValue ?? defaultName)) || null;\n};\n\nexport const getBrand = (brands: Brand[], key: string): Brand | null => (\n  brands.find((brand: Brand) => brand.name === key)\n)\n\nexport const attachThemeStyle = (selector: string, css: string, storyId: string) => {\n  const styling = document.getElementById(selector) as HTMLStyleElement;\n\n  if (styling) {\n    // @INFO: this makes the switching of theme reactive\n    styling.parentNode.removeChild(styling);\n  }\n\n  // @INFO: re-attach the <style> element\n  const style = document.createElement('style') as HTMLStyleElement;\n  style.setAttribute('id', selector);\n  style.setAttribute('data-addon', 'theme-switcher');\n  style.setAttribute('data-author', 'spark');\n  style.setAttribute('data-storyId', storyId);\n  style.innerHTML = css;\n\n  document.head.appendChild(style);\n};\n","import type { Renderer, ProjectAnnotations } from \"@storybook/types\";\nimport type { Addon_DecoratorFunction } from '@storybook/types';\nimport { withBrandThemesSwitcher } from './decorators/withBrandThemesSwitcher';\nimport { PARAM_KEY } from './constants';\n\nconst preview: ProjectAnnotations<Renderer> = {\n  decorators: [withBrandThemesSwitcher] as Addon_DecoratorFunction[],\n  parameters: {\n    [PARAM_KEY]: {\n      brands: [\n        { \n          name: 'verajohn_com',\n          css: 'verajohn_com.css',\n          indicator: 'red',\n          useIconOnIndicator: false,\n          label: 'Vera & John (COM)'\n        },\n        {\n          name: 'yuugado_com',\n          css: 'yuugado_com.css',\n          indicator: 'brown',\n          useIconOnIndicator: false,\n          label: 'Yuugado'\n        },\n      ],\n    },\n  },\n  globals: {\n    [PARAM_KEY]: null as any,\n  },\n};\n\nexport default preview;\n"]}